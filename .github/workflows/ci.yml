# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: btlab
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          
      - name: Install MySQL Client
        run: sudo apt-get install -y mysql-client

      - name: Wait for MySQL and Verify Hostname
        run: |
          echo "Pinging database service 'mysql'..."
          
          # Use the service name 'mysql' exactly as the Spring app does
          max_retries=15
          for i in $(seq 1 $max_retries); do
            # The client needs to connect to the hostname 'mysql'
            if mysql -h 127.0.0.1 -uroot -proot -e "SELECT 1;" &> /dev/null; then
              echo "✅ MySQL is ready and reachable via 127.0.0.1:3306!"
              break
            fi
            echo "Attempt $i/$max_retries: Still waiting for MySQL on 127.0.0.1 ..."
            sleep 4
            if [ $i -eq $max_retries ]; then
              echo "❌ Failed to connect to MySQL on 127.0.0.1 after $max_retries attempts."
              exit 1
            fi
          done
          
      - name: Build with Maven & Test
        env:
            SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/btlab?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&connectTimeout=20000
            SPRING_DATASOURCE_USERNAME: root
            SPRING_DATASOURCE_PASSWORD: root
        run: mvn -B package --file pom.xml

# 4. Upload JAR (so you can download it later if needed)
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: target/*.jar

# 5. Upload reports (test results + coverage)
      - name: Upload test & coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            target/surefire-reports/**
            target/site/jacoco/**
